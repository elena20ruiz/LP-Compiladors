<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: lego.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-2001
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR33
 */

#define ANTLR_VERSION	13333
#include "pcctscfg.h"
#include "pccts_stdio.h"

#include <string>
#include <iostream>
#include <map>
#include <vector>
using namespace std;

//****************************************************************************//
//*****************************ESTRUCTURES************************************//
//****************************************************************************//

typedef struct {
  int x,y; //punt cantonada superior esquerra
  int h,w; //DIMENSIONS
  vector<string> amunt;
} tblock;

typedef struct {
  int n,m;
  vector< vector<int> > height;
  map<string, tblock> blocks;
} Graella;


// struct to store information about tokens
typedef struct {
  string kind;
  string text;
} Attrib;

//****************************************************************************//
//****************************FUNCIONS EVALUATIVES****************************//
//****************************************************************************//
//void definirTaulell(AST* a);
//void executeListInstrucctions(AST *a);

// function to fill token information (predeclaration)
void zzcr_attr(Attrib *attr, int type, char *text);

// fields for AST nodes
#define AST_FIELDS string kind; string text;
#include "ast.h"

// macro to create a new AST node (and function predeclaration)
#define zzcr_ast(as,attr,ttype,textt) as=createASTnode(attr,ttype,textt)
AST* createASTnode(Attrib* attr,int ttype, char *textt);
#include "antlr.h"
#include "ast.h"
#include "tokens.h"
#include "dlgdef.h"
LOOKAHEAD

void
#ifdef __USE_PROTOS
zzerraction(void)
#else
zzerraction()
#endif
{
	(*zzerr)("invalid token");
	zzadvance();
	zzskip();
}
>>


%%START

@
	<<
		NLA = 1;
	>>

[\ \n]
	<<
		NLA = SPACE;
    zzskip();  
	>>

GRID
	<<
		NLA = GRID;
	>>

DEF
	<<
		NLA = DEF;
	>>

[0-9]+
	<<
		NLA = NUM;
	>>

[A-Z]+[0-9]+
	<<
		NLA = ID;
	>>

\=
	<<
		NLA = ASSIG;
	>>

\(
	<<
		NLA = PO;
	>>

\)
	<<
		NLA = PC;
	>>

\,
	<<
		NLA = COM;
	>>

\[
	<<
		NLA = CLAU1;
	>>

\]
	<<
		NLA = CLAU2;
	>>

\<
	<<
		NLA = LT;
	>>

\>
	<<
		NLA = BT;
	>>

ENDEF
	<<
		NLA = ENDEF;
	>>

WEST
	<<
		NLA = WEST;
	>>

SOUTH
	<<
		NLA = SOUTH;
	>>

NORTH
	<<
		NLA = NORTH;
	>>

EAST
	<<
		NLA = EST;
	>>

MOVE
	<<
		NLA = MOVE;
	>>

POP
	<<
		NLA = POP;
	>>

PUSH
	<<
		NLA = PUSH;
	>>

PLACE
	<<
		NLA = PLACE;
	>>

AT
	<<
		NLA = AT;
	>>

HEIGHT
	<<
		NLA = HEIGHT;
	>>

WHILE
	<<
		NLA = WHILE;
	>>

FITS
	<<
		NLA = FITS;
	>>

AND
	<<
		NLA = AND;
	>>

%%
